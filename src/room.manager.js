const logger = require('logger');

// copied from https://github.com/bencbartlett/Overmind
// const hatcheryLayout = {
//     data: {
//         anchor: {'x':25,'y':24},
//     },
//     1:{'name':'hatchery','buildings':{'spawn':{'pos':[{'x':25,'y':24}]}}},
//     2:{'name':'hatchery','buildings':{'extension':{'pos':[{'x':24,'y':23},{'x':26,'y':23},{'x':23,'y':24},{'x':27,'y':24},{'x':27,'y':26}]},'spawn':{'pos':[{'x':25,'y':24}]},'container':{'pos':[{'x':25,'y':25}]}}},
//     3:{'name':'hatchery','buildings':{'extension':{'pos':[{'x':24,'y':22},{'x':26,'y':22},{'x':24,'y':23},{'x':26,'y':23},{'x':23,'y':24},{'x':27,'y':24},{'x':23,'y':26},{'x':27,'y':26},{'x':24,'y':27},{'x':26,'y':27}]},'spawn':{'pos':[{'x':25,'y':24}]},'container':{'pos':[{'x':25,'y':25}]}}},
//     4:{'name':'hatchery','buildings':{'road':{'pos':[{'x':25,'y':25},{'x':25,'y':20},{'x':21,'y':21},{'x':24,'y':21},{'x':26,'y':21},{'x':29,'y':21},{'x':22,'y':22},{'x':25,'y':22},{'x':28,'y':22},{'x':23,'y':23},{'x':25,'y':23},{'x':27,'y':23},{'x':21,'y':24},{'x':24,'y':24},{'x':26,'y':24},{'x':29,'y':24},{'x':20,'y':25},{'x':22,'y':25},{'x':23,'y':25},{'x':27,'y':25},{'x':28,'y':25},{'x':30,'y':25},{'x':21,'y':26},{'x':24,'y':26},{'x':26,'y':26},{'x':29,'y':26},{'x':23,'y':27},{'x':25,'y':27},{'x':27,'y':27},{'x':22,'y':28},{'x':25,'y':28},{'x':28,'y':28},{'x':21,'y':29},{'x':24,'y':29},{'x':26,'y':29},{'x':29,'y':29},{'x':25,'y':30}]},'extension':{'pos':[{'x':23,'y':22},{'x':24,'y':22},{'x':26,'y':22},{'x':27,'y':22},{'x':24,'y':23},{'x':26,'y':23},{'x':22,'y':24},{'x':23,'y':24},{'x':27,'y':24},{'x':28,'y':24},{'x':22,'y':26},{'x':23,'y':26},{'x':27,'y':26},{'x':28,'y':26},{'x':24,'y':27},{'x':26,'y':27},{'x':23,'y':28},{'x':24,'y':28},{'x':26,'y':28},{'x':27,'y':28}]},'spawn':{'pos':[{'x':25,'y':24}]},'container':{'pos':[{'x':25,'y':25}]}}},
//     5:{'name':'hatchery','buildings':{'road':{'pos':[{'x':25,'y':25},{'x':25,'y':20},{'x':21,'y':21},{'x':24,'y':21},{'x':26,'y':21},{'x':29,'y':21},{'x':22,'y':22},{'x':25,'y':22},{'x':28,'y':22},{'x':23,'y':23},{'x':25,'y':23},{'x':27,'y':23},{'x':21,'y':24},{'x':24,'y':24},{'x':26,'y':24},{'x':29,'y':24},{'x':20,'y':25},{'x':22,'y':25},{'x':23,'y':25},{'x':27,'y':25},{'x':28,'y':25},{'x':30,'y':25},{'x':21,'y':26},{'x':24,'y':26},{'x':26,'y':26},{'x':29,'y':26},{'x':23,'y':27},{'x':25,'y':27},{'x':27,'y':27},{'x':22,'y':28},{'x':25,'y':28},{'x':28,'y':28},{'x':21,'y':29},{'x':24,'y':29},{'x':26,'y':29},{'x':29,'y':29},{'x':25,'y':30}]},'extension':{'pos':[{'x':23,'y':21},{'x':27,'y':21},{'x':23,'y':22},{'x':24,'y':22},{'x':26,'y':22},{'x':27,'y':22},{'x':21,'y':23},{'x':22,'y':23},{'x':24,'y':23},{'x':26,'y':23},{'x':28,'y':23},{'x':29,'y':23},{'x':22,'y':24},{'x':23,'y':24},{'x':27,'y':24},{'x':28,'y':24},{'x':22,'y':26},{'x':23,'y':26},{'x':27,'y':26},{'x':28,'y':26},{'x':22,'y':27},{'x':24,'y':27},{'x':26,'y':27},{'x':28,'y':27},{'x':29,'y':27},{'x':23,'y':28},{'x':24,'y':28},{'x':26,'y':28},{'x':27,'y':28},{'x':27,'y':29}]},'spawn':{'pos':[{'x':25,'y':24}]},'container':{'pos':[{'x':25,'y':25}]},'tower':{'pos':[{'x':29,'y':25}]},'link':{'pos':[{'x':25,'y':26}]}}},
//     6:{'name':'hatchery','buildings':{'road':{'pos':[{'x':25,'y':25},{'x':25,'y':20},{'x':21,'y':21},{'x':24,'y':21},{'x':26,'y':21},{'x':29,'y':21},{'x':22,'y':22},{'x':25,'y':22},{'x':28,'y':22},{'x':23,'y':23},{'x':25,'y':23},{'x':27,'y':23},{'x':21,'y':24},{'x':24,'y':24},{'x':26,'y':24},{'x':29,'y':24},{'x':20,'y':25},{'x':22,'y':25},{'x':23,'y':25},{'x':27,'y':25},{'x':28,'y':25},{'x':30,'y':25},{'x':21,'y':26},{'x':24,'y':26},{'x':26,'y':26},{'x':29,'y':26},{'x':23,'y':27},{'x':25,'y':27},{'x':27,'y':27},{'x':22,'y':28},{'x':25,'y':28},{'x':28,'y':28},{'x':21,'y':29},{'x':24,'y':29},{'x':26,'y':29},{'x':29,'y':29},{'x':25,'y':30}]},'extension':{'pos':[{'x':22,'y':21},{'x':23,'y':21},{'x':27,'y':21},{'x':28,'y':21},{'x':21,'y':22},{'x':23,'y':22},{'x':24,'y':22},{'x':26,'y':22},{'x':27,'y':22},{'x':29,'y':22},{'x':21,'y':23},{'x':22,'y':23},{'x':24,'y':23},{'x':26,'y':23},{'x':28,'y':23},{'x':29,'y':23},{'x':22,'y':24},{'x':23,'y':24},{'x':27,'y':24},{'x':28,'y':24},{'x':22,'y':26},{'x':23,'y':26},{'x':27,'y':26},{'x':28,'y':26},{'x':21,'y':27},{'x':22,'y':27},{'x':24,'y':27},{'x':26,'y':27},{'x':28,'y':27},{'x':29,'y':27},{'x':21,'y':28},{'x':23,'y':28},{'x':24,'y':28},{'x':26,'y':28},{'x':27,'y':28},{'x':29,'y':28},{'x':22,'y':29},{'x':23,'y':29},{'x':27,'y':29},{'x':28,'y':29}]},'spawn':{'pos':[{'x':25,'y':24}]},'container':{'pos':[{'x':25,'y':25}]},'tower':{'pos':[{'x':29,'y':25}]},'link':{'pos':[{'x':25,'y':26}]}}},
//     7:{'name':'hatchery','buildings':{'extension':{'pos':[{'x':21,'y':20},{'x':22,'y':20},{'x':28,'y':20},{'x':29,'y':20},{'x':20,'y':21},{'x':22,'y':21},{'x':23,'y':21},{'x':27,'y':21},{'x':28,'y':21},{'x':30,'y':21},{'x':20,'y':22},{'x':21,'y':22},{'x':23,'y':22},{'x':24,'y':22},{'x':26,'y':22},{'x':27,'y':22},{'x':29,'y':22},{'x':30,'y':22},{'x':21,'y':23},{'x':22,'y':23},{'x':24,'y':23},{'x':26,'y':23},{'x':28,'y':23},{'x':29,'y':23},{'x':22,'y':24},{'x':23,'y':24},{'x':27,'y':24},{'x':28,'y':24},{'x':22,'y':26},{'x':23,'y':26},{'x':27,'y':26},{'x':28,'y':26},{'x':21,'y':27},{'x':22,'y':27},{'x':24,'y':27},{'x':26,'y':27},{'x':28,'y':27},{'x':29,'y':27},{'x':21,'y':28},{'x':23,'y':28},{'x':24,'y':28},{'x':26,'y':28},{'x':27,'y':28},{'x':29,'y':28},{'x':20,'y':29},{'x':22,'y':29},{'x':23,'y':29},{'x':27,'y':29},{'x':28,'y':29},{'x':30,'y':29}]},'road':{'pos':[{'x':25,'y':25},{'x':25,'y':20},{'x':21,'y':21},{'x':24,'y':21},{'x':26,'y':21},{'x':29,'y':21},{'x':22,'y':22},{'x':25,'y':22},{'x':28,'y':22},{'x':23,'y':23},{'x':25,'y':23},{'x':27,'y':23},{'x':21,'y':24},{'x':24,'y':24},{'x':26,'y':24},{'x':29,'y':24},{'x':20,'y':25},{'x':22,'y':25},{'x':23,'y':25},{'x':27,'y':25},{'x':28,'y':25},{'x':30,'y':25},{'x':21,'y':26},{'x':24,'y':26},{'x':26,'y':26},{'x':29,'y':26},{'x':23,'y':27},{'x':25,'y':27},{'x':27,'y':27},{'x':22,'y':28},{'x':25,'y':28},{'x':28,'y':28},{'x':21,'y':29},{'x':24,'y':29},{'x':26,'y':29},{'x':29,'y':29},{'x':25,'y':30}]},'spawn':{'pos':[{'x':25,'y':24},{'x':24,'y':25}]},'tower':{'pos':[{'x':29,'y':25}]},'container':{'pos':[{'x':25,'y':25}]},'link':{'pos':[{'x':25,'y':26}]}}},
//     8:{'name':'hatchery','buildings':{'extension':{'pos':[{'x':20,'y':20},{'x':21,'y':20},{'x':22,'y':20},{'x':28,'y':20},{'x':29,'y':20},{'x':30,'y':20},{'x':20,'y':21},{'x':22,'y':21},{'x':23,'y':21},{'x':27,'y':21},{'x':28,'y':21},{'x':30,'y':21},{'x':20,'y':22},{'x':21,'y':22},{'x':23,'y':22},{'x':24,'y':22},{'x':26,'y':22},{'x':27,'y':22},{'x':29,'y':22},{'x':30,'y':22},{'x':21,'y':23},{'x':22,'y':23},{'x':24,'y':23},{'x':26,'y':23},{'x':28,'y':23},{'x':29,'y':23},{'x':22,'y':24},{'x':23,'y':24},{'x':27,'y':24},{'x':28,'y':24},{'x':22,'y':26},{'x':23,'y':26},{'x':27,'y':26},{'x':28,'y':26},{'x':21,'y':27},{'x':22,'y':27},{'x':24,'y':27},{'x':26,'y':27},{'x':28,'y':27},{'x':29,'y':27},{'x':20,'y':28},{'x':21,'y':28},{'x':23,'y':28},{'x':24,'y':28},{'x':26,'y':28},{'x':27,'y':28},{'x':29,'y':28},{'x':30,'y':28},{'x':20,'y':29},{'x':22,'y':29},{'x':23,'y':29},{'x':27,'y':29},{'x':28,'y':29},{'x':30,'y':29},{'x':20,'y':30},{'x':21,'y':30},{'x':22,'y':30},{'x':28,'y':30},{'x':29,'y':30},{'x':30,'y':30}]},'road':{'pos':[{'x':25,'y':25},{'x':25,'y':20},{'x':21,'y':21},{'x':24,'y':21},{'x':26,'y':21},{'x':29,'y':21},{'x':22,'y':22},{'x':25,'y':22},{'x':28,'y':22},{'x':23,'y':23},{'x':25,'y':23},{'x':27,'y':23},{'x':21,'y':24},{'x':24,'y':24},{'x':26,'y':24},{'x':29,'y':24},{'x':20,'y':25},{'x':22,'y':25},{'x':23,'y':25},{'x':27,'y':25},{'x':28,'y':25},{'x':30,'y':25},{'x':21,'y':26},{'x':24,'y':26},{'x':26,'y':26},{'x':29,'y':26},{'x':23,'y':27},{'x':25,'y':27},{'x':27,'y':27},{'x':22,'y':28},{'x':25,'y':28},{'x':28,'y':28},{'x':21,'y':29},{'x':24,'y':29},{'x':26,'y':29},{'x':29,'y':29},{'x':25,'y':30}]},'tower':{'pos':[{'x':25,'y':21},{'x':21,'y':25},{'x':29,'y':25},{'x':25,'y':29}]},'spawn':{'pos':[{'x':25,'y':24},{'x':24,'y':25},{'x':26,'y':25}]},'container':{'pos':[{'x':25,'y':25}]},'link':{'pos':[{'x':25,'y':26}]}}},
// };

// let visualizeRoad = (room, startPos, endPos) => {
    // room.visual.line()
// };

let visualizeSpawn = (room, pos) => {
    room.visual.circle(pos, {fill: 'transparent', radius: 0.55, stroke: 'white'});
    room.visual.circle(pos, {fill: 'yellow', radius: 0.35, stroke: 'black'});
};

let planSpawnner = (room) => {
    let spawnFlags = room.find(FIND_FLAGS, {
        filter: (flag) => {
            return flag.color === COLORS_ALL[COLOR_PURPLE]-1
        }
    });
    if (spawnFlags && spawnFlags.length > 0) {
        let spawn = spawnFlags[0];
        visualizeSpawn(room, spawn.pos);

        logger.info(`flag color is ${spawn.color} and ${COLORS_ALL[COLOR_PURPLE]-1}`);
    } else {
        logger.info(`flag not found`);
    }
};

// let planMiningRig = (room) => {
//     let sources = room.find(FIND_SOURCES);
//
//     for (let source in sources) {
//
//         let position = source.pos;
//
//         for (let x = -1; x <= 1; x ++) {
//             for (let y = -1; y <=1; y++) {
//                 room.visual.rect(position.x + x, position.y + y, 0.4, 0.4, {fill: 'red'})
//             }
//         }
//     }
//
// };

let operateTowers = (room) => {
    let towers = room.find(FIND_STRUCTURES, {
        filter: (structure) => { return structure.structureType === STRUCTURE_TOWER }
    });
    let targets = room.find(FIND_STRUCTURES, {
        filter: (structure) => {
            return (structure.structureType === STRUCTURE_EXTENSION ||
                structure.structureType === STRUCTURE_SPAWN ||
                structure.structureType === STRUCTURE_TOWER ||
                structure.structureType === STRUCTURE_ROAD) && structure.hits < structure.hitsMax-200;
        }
    });

    let towerIdx = 0;
    logger.debug(`repairs: ${targets.length}`);
    logger.debug(`towers: ${towers.length}`);
    for (let idx in targets) {
        if (towerIdx < towers.length) {
            let tower = towers[towerIdx];
            let target = targets[idx];

            if (target === tower) continue;
            tower.repair(target);
            towerIdx++;
        } else {
            break;
        }
    }
};

/***
 *
 * @param room
 * @type Room
 */
let run = (room) => {
    // no plan in room
    logger.info(`Room Manager: running room ${room.name}`);

    let mem = room.memory;
    if (!mem.plan) {
        mem.plan = {
            isPlanning: true
        };
    }

    if (mem.plan.isPlanning) {
        logger.info(`Room Manager: planning room`);
        planSpawnner(room);
        // planMiningRig(room);

        operateTowers(room);

    }
};

module.exports = {
    run,
};